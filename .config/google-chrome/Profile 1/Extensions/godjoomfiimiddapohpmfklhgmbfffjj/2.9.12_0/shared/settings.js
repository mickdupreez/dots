// Generated by CoffeeScript 1.10.0
(function() {
  window.Settings = (function() {
    var getKey, local, ref, settings, sync, syncLocal, syncRemote;

    function Settings() {}

    ref = [chrome.storage.sync, chrome.storage.local, {}], sync = ref[0], local = ref[1], settings = ref[2];

    getKey = function(args) {
      var hostname, ref1, ref2, scopeKey;
      if (args == null) {
        args = [];
      }
      ref2 = [(ref1 = args[args.length - 1]) != null ? ref1['scope_key'] : void 0, document.location.hostname], scopeKey = ref2[0], hostname = ref2[1];
      if (/^\w+$/.test(hostname) && !/local/.test(hostname)) {
        scopeKey = 'background';
      }
      if (scopeKey) {
        if (scopeKey === 'host') {
          scopeKey = hostname;
        }
      } else {
        scopeKey = $.isPlainObject(args[0]) ? 'background' : typeof args[0] === 'string' && args[0].startsWith('@') ? 'background' : hostname;
      }
      return scopeKey || 'other';
    };

    syncLocal = function(callback) {
      var localKey;
      localKey = getKey(arguments);
      if (localKey !== 'background') {
        local.get(localKey, function(obj) {
          return settings[localKey] = obj[localKey];
        });
      }
      return local.get('background', function(obj) {
        try {
          settings['background'] = obj['background'] || JSON.parse(localStorage['__vrome_setting'] || '{}');
          return callback != null ? callback.call() : void 0;
        } catch (undefined) {}
      });
    };

    syncRemote = function() {
      var syncToRemote;
      syncToRemote = function() {
        return sync.set({
          background: settings['background']
        });
      };
      setInterval(syncToRemote, 1000 * 60);
      if (settings['background'] == null) {
        settings['background'] = {};
      }
      return sync.get('background', function(obj) {
        return $.extend(settings['background'], obj['background']);
      });
    };

    Settings.init = function(callback) {
      if (getKey() === 'background') {
        syncRemote();
      }
      syncLocal(callback);
      return chrome.storage.onChanged.addListener(syncLocal);
    };

    Settings.add = function(values) {
      var i, len, localKey, name, names, ref1, ref2, setting, value;
      localKey = getKey(arguments);
      if ($.isPlainObject(values)) {
        if (settings[localKey] == null) {
          settings[localKey] = {};
        }
        $.extend(true, settings[localKey], values);
      } else {
        ref1 = [arguments[0].trimFirst('@').split('.'), arguments[1], settings[localKey]], names = ref1[0], value = ref1[1], setting = ref1[2];
        ref2 = names.slice(0, -1);
        for (i = 0, len = ref2.length; i < len; i++) {
          name = ref2[i];
          if (setting[name] == null) {
            setting[name] = {};
          }
          setting = setting[name];
        }
        setting[names[names.length - 1]] = value;
      }
      return local.set(settings);
    };

    Settings.get = function(names) {
      var i, len, name, ref1, setting;
      try {
        setting = settings;
        if (names && (setting = setting[getKey(arguments)])) {
          ref1 = names.trimFirst('@').split('.');
          for (i = 0, len = ref1.length; i < len; i++) {
            name = ref1[i];
            setting = setting[name];
          }
        }
        return setting;
      } catch (undefined) {}
    };

    return Settings;

  })();

}).call(this);
