// Generated by CoffeeScript 1.10.0
(function() {
  window.Zoom = (function() {
    var DEFAULT_INDEX, LEVELS, currentLevel, setZoom;

    function Zoom() {}

    LEVELS = ['30%', '50%', '67%', '80%', '90%', '100%', '110%', '120%', '133%', '150%', '170%', '190%', '220%', '250%', '280%', '310%'];

    DEFAULT_INDEX = LEVELS.indexOf('100%');

    currentLevel = function() {
      var index, ref, ref1;
      index = LEVELS.indexOf(typeof document !== "undefined" && document !== null ? (ref = document.body) != null ? (ref1 = ref.style) != null ? ref1.zoom : void 0 : void 0 : void 0);
      if (index === -1) {
        return DEFAULT_INDEX;
      } else {
        return index;
      }
    };

    setZoom = function(count, keepCurrentPage) {
      var index, level, topPercent;
      index = count ? currentLevel() + times() * count : DEFAULT_INDEX;
      index = Math.min(LEVELS.length - 1, Math.max(0, index));
      level = index - DEFAULT_INDEX;
      Settings.add({
        zoom_level: index - DEFAULT_INDEX,
        scope_key: 'host'
      });
      topPercent = window.scrollY / document.height;
      document.body.style.zoom = LEVELS[index];
      if (keepCurrentPage) {
        return scrollTo(0, topPercent * document.height);
      }
    };

    Zoom.zoomIn = function() {
      return setZoom(1);
    };

    desc(Zoom.zoomIn, 'Zoom in, based on the center of the screen');

    Zoom.out = function() {
      return setZoom(-1);
    };

    desc(Zoom.out, 'Zoom out, based on the center of the screen');

    Zoom.more = function() {
      return setZoom(3);
    };

    desc(Zoom.more, '3x Zoom in, based on the center of the screen');

    Zoom.reduce = function() {
      return setZoom(-3);
    };

    desc(Zoom.reduce, '3x Zoom out, based on the center of the screen');

    Zoom.reset = function() {
      return setZoom();
    };

    desc(Zoom.reset, 'Zoom reset, based on the center of the screen');

    Zoom.current_in = function() {
      return setZoom(1, true);
    };

    desc(Zoom.current_in, 'Zoom in, based on the beginning of the screen');

    Zoom.current_out = function() {
      return setZoom(-1, true);
    };

    desc(Zoom.current_out, 'Zoom out, based on the beginning of the screen');

    Zoom.current_more = function() {
      return setZoom(3, true);
    };

    desc(Zoom.current_more, 'x3 Zoom in, based on the beginning of the screen');

    Zoom.current_reduce = function() {
      return setZoom(-3, true);
    };

    desc(Zoom.current_reduce, 'x3 Zoom out, based on the beginning of the screen');

    Zoom.current_reset = function() {
      return setZoom(0, true);
    };

    desc(Zoom.current_reset, 'Zoom reset, based on the beginning of the screen');

    Zoom.current = function() {
      return parseInt(LEVELS[currentLevel()], 10) / 100;
    };

    Zoom.init = function() {
      return setZoom(Settings.get('zoom_level'));
    };

    return Zoom;

  })();

}).call(this);
