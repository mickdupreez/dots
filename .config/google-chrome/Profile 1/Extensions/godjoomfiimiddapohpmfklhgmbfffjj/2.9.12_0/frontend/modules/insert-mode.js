// Generated by CoffeeScript 1.10.0
(function() {
  window.InsertMode = (function() {
    var caretPosition, caretPositionOfAboveLine, caretPositionOfCurrentLine, caretPositionOfNext2Line, caretPositionOfNextLine, currentElement, elem, getElementSelection, getElementText, getFocusableElements, lineStart, next2LineStart, nextEditId, nextLineStart, prevLineStart, ref, storeLastValue, storedValues, value;

    function InsertMode() {}

    ref = [[], 0], storedValues = ref[0], nextEditId = ref[1], elem = ref[2], caretPosition = ref[3], value = ref[4], lineStart = ref[5], prevLineStart = ref[6], nextLineStart = ref[7], next2LineStart = ref[8];

    storeLastValue = function() {
      if (value !== storedValues[storedValues.length - 1]) {
        return storedValues.push(value);
      }
    };

    currentElement = function() {
      var err, error;
      elem = document.activeElement;
      try {
        if (elem) {
          caretPosition = elem.selectionEnd;
          value = elem.value || elem.innerText;
          lineStart = caretPositionOfCurrentLine();
          prevLineStart = caretPositionOfAboveLine();
          nextLineStart = caretPositionOfNextLine();
          next2LineStart = caretPositionOfNext2Line();
          storeLastValue();
        }
      } catch (error) {
        err = error;
        Debug(err);
      }
      return elem;
    };

    caretPositionOfCurrentLine = function() {
      return value.slice(0, caretPosition).lastIndexOf('\n') + 1;
    };

    caretPositionOfAboveLine = function() {
      return value.slice(0, +(caretPositionOfCurrentLine() - 2) + 1 || 9e9).lastIndexOf('\n') + 1;
    };

    caretPositionOfNextLine = function() {
      var position;
      position = value.slice(caretPosition).indexOf('\n');
      if (position === -1) {
        return value.length + 1;
      }
      return caretPosition + position + 1;
    };

    caretPositionOfNext2Line = function() {
      var position;
      position = value.slice(nextLineStart).indexOf('\n');
      if (position === -1) {
        return value.length + 1;
      }
      return nextLineStart + position + 1;
    };

    InsertMode.blurFocus = function() {
      return $(currentElement()).blur();
    };

    getFocusableElements = function(inFullPage) {
      return $('input[type="text"],input[type="password"],input[type="search"],textarea,input:not([type]),[contenteditable]').filter(function(_, e) {
        return isElementVisible($(e), inFullPage);
      });
    };

    InsertMode.focusFirstTextInput = function() {
      var elems, ref1;
      Unfocus.didReceiveInput();
      elems = getFocusableElements(false);
      if (elems.length === 0) {
        elems = getFocusableElements(true);
      }
      return (ref1 = $(elems[times() - 1]).focus().select().get(0)) != null ? ref1.scrollIntoViewIfNeeded() : void 0;
    };

    desc(InsertMode.focusFirstTextInput, 'Focus the {count} input field');

    InsertMode.restoreLastValue = function() {
      var ref1;
      return elem.value = (ref1 = storedValues.pop()) != null ? ref1 : value;
    };

    desc(InsertMode.restoreLastValue, 'Undo last change');

    InsertMode.moveToFirstOrSelectAll = function() {
      var ref1;
      return (ref1 = currentElement()) != null ? ref1.setSelectionRange(0, (caretPosition === 0 ? value.length : 0)) : void 0;
    };

    desc(InsertMode.moveToFirstOrSelectAll, 'Move to first word or select all');

    InsertMode.moveToEnd = function() {
      elem = currentElement();
      return elem != null ? elem.setSelectionRange(value.length, value.length) : void 0;
    };

    desc(InsertMode.moveToEnd, 'Move to end');

    InsertMode.moveToBeginCurrentLine = function() {
      elem = currentElement();
      return elem != null ? elem.setSelectionRange(lineStart, lineStart) : void 0;
    };

    desc(InsertMode.moveToBeginCurrentLine, 'Move to the beginning of the line');

    InsertMode.moveToEndCurrentLine = function() {
      elem = currentElement();
      return elem != null ? elem.setSelectionRange(nextLineStart - 1, nextLineStart - 1) : void 0;
    };

    desc(InsertMode.moveToEndCurrentLine, 'Move forwards to end of the line');

    InsertMode.deleteToBeginCurrentLine = function() {
      elem = currentElement();
      elem.value = value.slice(0, lineStart) + value.slice(caretPosition);
      return elem != null ? elem.setSelectionRange(lineStart, lineStart) : void 0;
    };

    desc(InsertMode.deleteToBeginCurrentLine, 'Delete to the beginning of the line');

    InsertMode.deleteToEndCurrentLine = function() {
      elem = currentElement();
      elem.value = value.slice(0, caretPosition) + value.slice(nextLineStart - 1);
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteToEndCurrentLine, 'Delete forwards to end of the line');

    InsertMode.deleteForwardChar = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition) + value.substr(caretPosition + 1);
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteForwardChar, 'Delete forward char. <M-(yuio)> for delete back/forward a word/char');

    InsertMode.deleteBackwardChar = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition - 1) + value.substr(caretPosition);
      return elem != null ? elem.setSelectionRange(caretPosition - 1, caretPosition - 1) : void 0;
    };

    desc(InsertMode.deleteBackwardChar, 'Delete backward char. <M-(yuio)> for delete back/forward a word/char');

    InsertMode.deleteBackwardWord = function() {
      var position;
      elem = currentElement();
      elem.value = value.substr(0, caretPosition).replace(/[^\s\n.,]*?.\s*$/, '') + value.substr(caretPosition);
      position = elem.value.length - (value.length - caretPosition);
      return elem != null ? elem.setSelectionRange(position, position) : void 0;
    };

    desc(InsertMode.deleteBackwardWord, 'Delete backward word. <M-(yuio)> for delete back/forward a word/char');

    InsertMode.deleteForwardWord = function() {
      elem = currentElement();
      elem.value = value.substr(0, caretPosition) + value.substr(caretPosition).replace(/^\s*.[^\s\n.,]*/, '');
      return elem != null ? elem.setSelectionRange(caretPosition, caretPosition) : void 0;
    };

    desc(InsertMode.deleteForwardWord, 'Delete forward word. <M-(yuio)> for delete back/forward a word/char');

    InsertMode.moveBackwardWord = function() {
      var str;
      elem = currentElement();
      str = value.substr(0, caretPosition).replace(/[^\s\n.,]*?.\s*$/, '');
      return elem != null ? elem.setSelectionRange(str.length, str.length) : void 0;
    };

    desc(InsertMode.moveBackwardWord, 'Move backward word. <M-(hjkl)> for move back/forward a word/char');

    InsertMode.moveForwardWord = function() {
      var position;
      elem = currentElement();
      position = value.length - value.substr(caretPosition).replace(/^\s*.[^\s\n.,]*/, '').length;
      return elem != null ? elem.setSelectionRange(position, position) : void 0;
    };

    desc(InsertMode.moveForwardWord, 'Move forward word. <M-(hjkl)> for move back/forward a word/char');

    InsertMode.moveBackwardChar = function() {
      elem = currentElement();
      return elem.setSelectionRange(caretPosition - 1, caretPosition - 1);
    };

    desc(InsertMode.moveBackwardChar, 'Move backward char. <M-(hjkl)> for move back/forward a word/char');

    InsertMode.moveForwardChar = function() {
      elem = currentElement();
      return elem.setSelectionRange(caretPosition + 1, caretPosition + 1);
    };

    desc(InsertMode.moveForwardChar, 'Move forward char. <M-(hjkl)> for move back/forward a word/char');

    InsertMode.moveForwardLine = function() {
      var start;
      elem = currentElement();
      start = Math.min(nextLineStart + (caretPosition - lineStart), next2LineStart - 1);
      return elem.setSelectionRange(start, start);
    };

    desc(InsertMode.moveForwardLine, 'Move forward line. <M-(nm)> for move back/forward a line');

    InsertMode.moveBackwardLine = function() {
      var start;
      elem = currentElement();
      start = Math.min(prevLineStart + (caretPosition - lineStart), lineStart - 1);
      return elem.setSelectionRange(start, start);
    };

    desc(InsertMode.moveBackwardLine, 'Move backward line. <M-(nm)> for move back/forward a line');

    InsertMode.externalEditorCallBack = function(msg) {
      var element;
      element = $("[vrome_edit_id='" + msg.editId + "']").removeAttr('vrome_edit_id')[0];
      if (element) {
        if (element.value != null) {
          return element.value = msg.value;
        } else {
          return element.innerText = msg.value;
        }
      }
    };

    getElementText = function(element) {
      var ref1;
      return (ref1 = element.value) != null ? ref1 : element.innerText;
    };

    getElementSelection = function(element) {
      var contents, div, preCaretRange, range;
      if (element.value != null) {
        return element.value.substr(0, elem.selectionStart);
      } else {
        range = window.getSelection().getRangeAt(0);
        preCaretRange = range.cloneRange();
        preCaretRange.selectNodeContents(element);
        preCaretRange.setEnd(range.endContainer, range.endOffset);
        contents = preCaretRange.cloneContents();
        div = document.createElement('div');
        div.appendChild(contents);
        return div.innerHTML.replace(/<br>/g, '\n');
      }
    };

    InsertMode.externalEditor = function() {
      var col, editId, line, text;
      elem = currentElement();
      editId = String(nextEditId++);
      text = getElementSelection(elem);
      line = 1 + (text.match(/\n/g) || []).length;
      col = 1 + text.match(/\n?(.*?)$/)[1].length;
      elem.setAttribute('vrome_edit_id', editId);
      return Post({
        action: 'Editor.open',
        callbackAction: 'InsertMode.externalEditorCallBack',
        data: getElementText(elem),
        editId: editId,
        line: line,
        col: col
      });
    };

    desc(InsertMode.externalEditor, 'Launch the external editor');

    return InsertMode;

  })();

}).call(this);
