// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.CmdLine = (function() {
    var commands, onClickFunc, onSelectFunc, onTabFunc, search;

    function CmdLine() {}

    commands = {};

    CmdLine.add = function(name, func, hasArgs) {
      return commands[name] = {
        name: name,
        description: func != null ? func.description : void 0,
        func: func,
        hasArgs: hasArgs
      };
    };

    CmdLine.start = function() {
      return Dialog.start({
        title: 'Command-line',
        search: search,
        onTab: onTabFunc
      });
    };

    desc(CmdLine.start, 'Start command line');

    onClickFunc = function(command) {
      return function(e) {
        var content, keywords, ref, title;
        ref = [$(e.target).attr('title'), CmdBox.get().content.split(' ')], title = ref[0], keywords = ref[1];
        content = [title, keywords.slice(1).join(' ')].join(' ');
        CmdBox.softSet({
          content: content
        });
        command.func.call('', keywords.slice(1).join(' '));
        Dialog.stop();
        return false;
      };
    };

    onSelectFunc = function(e) {
      var content, ref, title;
      ref = [$(e.target).attr('title') + ' ', CmdBox.get()._content.trim()], title = ref[0], content = ref[1];
      if (title.startsWith(content) && !content.startsWith(title.trim())) {
        return CmdBox.softSet({
          content: title,
          selection: title.trimFirstStr(content)
        });
      }
    };

    onTabFunc = function(e) {
      var contents, ref, ref1, ref2, title;
      if ((ref = CmdBox.get().selection) != null ? ref.length : void 0) {
        return CmdBox.softSet({
          content: CmdBox.get().content,
          selectLast: true
        });
      }
      ref2 = [((ref1 = Dialog.current()) != null ? ref1.attr('title') : void 0) || '', CmdBox.get().content.split(' ')], title = ref2[0], contents = ref2[1];
      if (!title.startsWith(contents[0])) {
        contents[0] = title;
        return CmdBox.softSet({
          content: contents.join(' ').trim() + ' '
        });
      }
    };

    search = function() {
      var addToAvailable, available, cmd, command, cuteCommands, key, keyword, regexp;
      keyword = CmdBox.get()._content;
      cmd = keyword.split(' ').shift();
      available = [];
      addToAvailable = function(command) {
        if (indexOf.call(available, command) < 0) {
          return available.push(command);
        }
      };
      for (key in commands) {
        command = commands[key];
        if (key.startsWith(cmd)) {
          addToAvailable(command);
        }
      }
      for (key in commands) {
        command = commands[key];
        if (key.indexOf(cmd) !== -1) {
          addToAvailable(command);
        }
      }
      regexp = RegExp(cmd.split('').join('.*'), 'i');
      for (key in commands) {
        command = commands[key];
        if (regexp.test(key)) {
          addToAvailable(command);
        }
      }
      for (key in commands) {
        command = commands[key];
        if (regexp.test(command.description)) {
          addToAvailable(command);
        }
      }
      cuteCommands = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = available.length; i < len; i++) {
          command = available[i];
          results.push({
            title: command.name,
            description: command.description,
            onClick: onClickFunc(command),
            onSelect: onSelectFunc
          });
        }
        return results;
      })();
      return Dialog.draw({
        urls: cuteCommands,
        keyword: ''
      });
    };

    return CmdLine;

  })();

}).call(this);
