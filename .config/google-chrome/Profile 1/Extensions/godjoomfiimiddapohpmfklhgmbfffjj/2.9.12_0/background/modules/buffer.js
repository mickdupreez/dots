// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Buffer = (function() {
    var getMatchedTabs;

    function Buffer() {}

    getMatchedTabs = function(tabs, keyword) {
      var regexp;
      if (/^\d+$/.test(keyword)) {
        return [tabs[Number(keyword) - 1]];
      } else {
        regexp = new RegExp(keyword, 'i');
        return tabs.filter(function(tab) {
          return regexp.test(tab.url) || regexp.test(tab.title);
        });
      }
    };

    Buffer.gotoFirstMatch = function(msg) {
      return chrome.tabs.query({
        windowId: msg.tab.windowId
      }, function(tabs) {
        tabs = getMatchedTabs(tabs, msg.keyword);
        if (tabs.length > 0) {
          return Tab.select({
            index: tabs[0].index,
            tab: tabs[0]
          });
        } else {
          return Post(msg.tab, {
            action: 'CmdBox.set',
            title: "no matched tab found"
          });
        }
      });
    };

    Buffer.deleteMatch = function(msg) {
      return chrome.tabs.query({
        windowId: msg.tab.windowId
      }, function(tabs) {
        var i, len, ref, tab;
        ref = getMatchedTabs(tabs, msg.keyword);
        for (i = 0, len = ref.length; i < len; i++) {
          tab = ref[i];
          Tab.close(tab);
        }
      });
    };

    Buffer.deleteNotMatch = function(msg) {
      return chrome.tabs.query({
        windowId: msg.tab.windowId
      }, function(tabs) {
        var i, len, matchedTabs, tab;
        matchedTabs = getMatchedTabs(tabs, msg.keyword);
        for (i = 0, len = tabs.length; i < len; i++) {
          tab = tabs[i];
          if (indexOf.call(matchedTabs, tab) < 0) {
            Tab.close(tab);
          }
        }
      });
    };

    return Buffer;

  })();

}).call(this);
